<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	 <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
	 	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
	 	<property name="url" value="jdbc:oracle:thin:@112.220.114.130:1521:xe"></property>
	 	<property name="username" value="TEAM1_202301F"></property>
	 	<property name="password" value="java"></property>
	 </bean>
	 
	 <!--  
	 	데이터베이스와 연결을 맺고 끊어질 때까지의 라이프 사이클을 관리해주는 SqlSessionTemplate 객체를 생성한다.
	 	1) dataSource
	 	2) Mapper xml의 위치 지정
	 -->
	 
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource"></property>
	 	<property name="mapperLocations" value="classpath:/sqlmap/**/*_SQL.xml"></property>
	 	<property name="configLocation" value="/WEB-INF/mybatisAlias/mybatisAlias.xml"></property>
	 </bean>
	 
	 <!--  
	 	데이터베이스에 개발적으로 쿼리를 실행시키는 객체
	 	이 객체를 통해서 query를 실행한다.
	 -->
	 
	 <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	 	<constructor-arg name="sqlSessionFactory" index="0" ref="sqlSessionFactory"></constructor-arg>
	 </bean>	
	 
	 <!--  
	 	Mapper 인터페이스 설정
	 	개발자가 직접 DAO를 설정하지 않아도 자동으로 Mapper 인터페이스를 활용하는 객체를 생성하게 된다.
	 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<property name="basePackage" value="kr.or.everyware"></property>
	 	<property name="annotationClass" value="org.apache.ibatis.annotations.Mapper"></property>
	 </bean>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760"/>
		<property name="defaultEncoding" value="utf-8"/>
	</bean>
	<bean id="uploadPath" class="java.lang.String">
	 	<constructor-arg value="D:\uploads"></constructor-arg>
	 </bean>
	 
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/> 
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	 <!-- 스케쥴러 파일이 존재하는 패키지 -->
	<context:component-scan base-package="kr.or.everyware.everyware.suvy.scheduler"/>
	<!-- 크론탭 설정에 -->
	<task:scheduler id="jobScheduler" pool-size="10"/>
	<task:annotation-driven scheduler="jobScheduler"/>
	
	<!-- geoReader -->
	<context:component-scan base-package="kr.or.everyware.security"/>
</beans>
